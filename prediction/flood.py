# -*- coding: utf-8 -*-
"""Payal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LyQ44ljdSF2hueCHYsge-tJsCkx17zWh
"""

import pandas as pd
import numpy as np
import os
import json


data=pd.read_csv("Mumbai.csv")
data.head()

data['FLOODS'].replace(['YES','NO'],[1,0],inplace=True)
data.head()

x = data.iloc[:,1:14]
x.head()

y = data.iloc[:, -1]
y.head()

from sklearn import preprocessing
minmax = preprocessing.MinMaxScaler(feature_range=(0,1))
minmax.fit(x).transform(x)

from sklearn import model_selection,neighbors
from sklearn.model_selection import train_test_split 
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

x_train.head()

y_train.head()

x_train_std = minmax.fit_transform(x_train)
x_test_std = minmax.fit_transform(x_test)

from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LogisticRegression

lr = LogisticRegression()
lr_clf = lr.fit(x_train_std,y_train)
y_predict = lr_clf.predict(x_test_std)
abc=str(6/24*100)

from sklearn.metrics import accuracy_score
acc=accuracy_score(y_test,y_predict)*100
print(acc)

class MyLogReg(LogisticRegression):
    
    # Override the class constructor
    def __init__(self, C=1.0, solver='liblinear', max_iter=100, acc_out=None, summ=None):
        LogisticRegression.__init__(self, C=C, solver=solver, max_iter=max_iter)
        self.acc_out = acc_out
        self.summ = summ
       
    # A method for saving object data to JSON file
    def save_json(self, filepath):
        dict_ = {}
        dict_['C'] = self.C
        dict_['max_iter'] = self.max_iter
        dict_['solver'] = self.solver
        dict_['acc_out'] = self.acc_out.tolist() if self.acc_out is not None else 'None'
        dict_['summ'] = self.summ if self.summ is not None else 'None'
       
        # Creat json and save to file
        json_txt = json.dumps(dict_, indent=4)
        with open(filepath, 'w') as file:
            file.write(json_txt)
    
    # A method for loading data from JSON file
    def load_json(self, filepath):
        with open(filepath, 'r') as file:
            dict_ = json.load(file)
            
        self.C = dict_['C']
        self.max_iter = dict_['max_iter']
        self.solver = dict_['solver']
        self.acc_out = np.asarray(dict_['acc_out']) if dict_['acc_out'] != 'None' else None
        self.summ = np.asarray(dict_['summ']) if dict_['summ'] != 'None' else None

filepath = "mylogreg.json"

# Create a model and train it
mylogreg = MyLogReg(acc_out=acc,summ=abc)
mylogreg.save_json(filepath)

# Create a new object and load its data from JSON file
json_mylogreg = MyLogReg()
json_mylogreg.load_json(filepath)
json_mylogreg